version: "3.9"

services:
  db:
    env_file: .env
    container_name: ${APP_NAME}_postgres
    image: postgres:${POSTGRES_VERSION}
    volumes:
      - ./db/data:/var/lib/postgresql/data
    networks:
      default:
        ipv4_address: 172.16.1.2
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: on-failure

  asgi:
    env_file: .env
    container_name: ${APP_NAME}_app
    image: python:${PYTHON_VERSION}
    build:
      context: .
      dockerfile: ./app/Dockerfile
    command: python app/api.py
    networks:
      default:
        ipv4_address: 172.16.1.3
    ports:
      - 8000:8000
    restart: on-failure
    depends_on:
      - db

  test_db:
    env_file: .env
    container_name: ${APP_NAME}_postgres_test
    image: postgres:${POSTGRES_VERSION}
    networks:
      default:
        ipv4_address: 172.16.1.22
    ports:
      - 5433:5433
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: on-failure

  tests:
    env_file: .env
    container_name: ${APP_NAME}_test
    image: python:${PYTHON_VERSION}
    build:
      context: .
      dockerfile: ./tests/Dockerfile
    command: pytest -rAv tests/test_api.py
    networks:
      default:
        ipv4_address: 172.16.1.33
    ports:
      - 8001:8001
    depends_on:
      test_db:
        condition: service_healthy

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.1.0/24